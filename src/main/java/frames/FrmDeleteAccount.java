/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import classes.CSVFileManager;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author EMAN
 */
public class FrmDeleteAccount extends javax.swing.JFrame {
    
    private static final java.lang.String JDBC_URL = "jdbc:mysql://sql12.freesqldatabase.com:3306/sql12713427";
    private static final java.lang.String USERNAME = "sql12713427";
    private static final java.lang.String PASSWORD = "7l87SNw2yD";
    
    //image database
    private static final java.lang.String imgJDBC_URL = "jdbc:mysql://sql12.freesqldatabase.com:3306/sql12713671";
    private static final java.lang.String imgUSERNAME = "sql12713671";
    private static final java.lang.String imgPASSWORD = "KwHeJTT2C4";

    private FrmITpage itPageRef;
    /**
     * Creates new form FrmDeleteAccount
     */
    public FrmDeleteAccount(FrmITpage itPageRef) {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null); // Center the frame
        setPreferredSize(new Dimension(586, 467));
        
        // Set frame properties
        pack();  // Adjust size to the preferred size
        
        displayBgFromDatabase("FrmDeleteAccount");
        
        this.itPageRef = itPageRef;
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    
    // Method to fetch and display image from the database
    private void displayBgFromDatabase(String frameName) {
        try (Connection conn = DriverManager.getConnection(imgJDBC_URL, imgUSERNAME, imgPASSWORD)) {
            // Prepare SQL statement to retrieve image data from the database
            String SELECT_IMAGE = "SELECT Img FROM Image WHERE Frame = ?";

            try (PreparedStatement pstmt = conn.prepareStatement(SELECT_IMAGE)) {
                // Set the frame name as a parameter for the prepared statement
                pstmt.setString(1, frameName);

                // Execute the SELECT statement
                ResultSet resultSet = pstmt.executeQuery();

                // Check if a result was found
                if (resultSet.next()) {
                    // Retrieve the image data as a byte array
                    byte[] imgByteArray = resultSet.getBytes("Img");

                    // Convert the byte array to an ImageIcon
                    ImageIcon icon = new ImageIcon(imgByteArray);

                    // Set the ImageIcon as the icon for the JLabel
                    jLabel1.setIcon(icon);
                } else {
                    System.out.println("Image not found.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
                // Handle the exception appropriately
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately
        }
    }   

    //method for populating textfields
public void populateFields(String[] accountInfo) {
    // Check if there are enough elements in the array
    if (accountInfo.length >= 4) { // Adjusted index to 4 because EmployeeNum is now used
        txtEmployeeNum.setText(accountInfo[0]); // Populate EmployeeNum
        txtUsername.setText(accountInfo[1]);    // Populate Username
        txtPassword.setText(accountInfo[2]);    // Populate Password
        if (accountInfo.length >= 5) {          // Check if Role Access is available
            String roleAccess = accountInfo[3]; // Retrieve Role Access
            // Select the Role Access in the JComboBox
            DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) jCBRoleAccess.getModel();
            if (model.getIndexOf(roleAccess) != -1) { // Check if Role Access exists in the model
                jCBRoleAccess.setSelectedItem(roleAccess); // Set Role Access in the JComboBox
            }
        }
    }
}


    
    //event handler method for close button
    private void FrameClose(java.awt.event.MouseEvent evt) {                            
        this.dispose();
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        lblRoleAccess = new javax.swing.JLabel();
        jCBRoleAccess = new javax.swing.JComboBox<>();
        btnDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblEmployeeNum = new javax.swing.JLabel();
        txtEmployeeNum = new javax.swing.JTextField();
        btnViewEmp = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(586, 467));
        setMinimumSize(new java.awt.Dimension(586, 467));
        setPreferredSize(new java.awt.Dimension(586, 467));
        setSize(new java.awt.Dimension(586, 467));
        getContentPane().setLayout(null);

        lblUsername.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername.setText("Username:");
        getContentPane().add(lblUsername);
        lblUsername.setBounds(130, 190, 73, 17);

        lblPassword.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblPassword.setForeground(new java.awt.Color(255, 255, 255));
        lblPassword.setText("Password:");
        getContentPane().add(lblPassword);
        lblPassword.setBounds(130, 250, 69, 17);

        txtUsername.setEditable(false);
        txtUsername.setBackground(new java.awt.Color(255, 255, 255));
        txtUsername.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        txtUsername.setForeground(new java.awt.Color(69, 54, 54));
        getContentPane().add(txtUsername);
        txtUsername.setBounds(250, 190, 200, 28);

        txtPassword.setEditable(false);
        txtPassword.setBackground(new java.awt.Color(255, 255, 255));
        txtPassword.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        txtPassword.setForeground(new java.awt.Color(69, 54, 54));
        getContentPane().add(txtPassword);
        txtPassword.setBounds(250, 250, 201, 28);

        lblRoleAccess.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblRoleAccess.setForeground(new java.awt.Color(255, 255, 255));
        lblRoleAccess.setText("Role Access:");
        getContentPane().add(lblRoleAccess);
        lblRoleAccess.setBounds(130, 310, 84, 17);

        jCBRoleAccess.setBackground(new java.awt.Color(255, 255, 255));
        jCBRoleAccess.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jCBRoleAccess.setForeground(new java.awt.Color(69, 54, 54));
        jCBRoleAccess.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "HR", "Payroll", "IT" }));
        jCBRoleAccess.setEnabled(false);
        getContentPane().add(jCBRoleAccess);
        jCBRoleAccess.setBounds(250, 310, 200, 28);

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(68, 56, 56));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete);
        btnDelete.setBounds(320, 360, 79, 28);

        btnCancel.setBackground(new java.awt.Color(255, 255, 255));
        btnCancel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(68, 56, 56));
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancel);
        btnCancel.setBounds(400, 360, 80, 28);

        lblEmployeeNum.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblEmployeeNum.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeeNum.setText("Employee ID:");
        lblEmployeeNum.setToolTipText("");
        getContentPane().add(lblEmployeeNum);
        lblEmployeeNum.setBounds(130, 110, 120, 17);

        txtEmployeeNum.setEditable(false);
        txtEmployeeNum.setBackground(new java.awt.Color(255, 255, 255));
        txtEmployeeNum.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        txtEmployeeNum.setForeground(new java.awt.Color(69, 54, 54));
        getContentPane().add(txtEmployeeNum);
        txtEmployeeNum.setBounds(250, 100, 200, 30);

        btnViewEmp.setBackground(new java.awt.Color(255, 255, 255));
        btnViewEmp.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        btnViewEmp.setForeground(new java.awt.Color(56, 48, 48));
        btnViewEmp.setText("View Employees");
        btnViewEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewEmpActionPerformed(evt);
            }
        });
        getContentPane().add(btnViewEmp);
        btnViewEmp.setBounds(274, 136, 150, 25);

        jLabel1.setText("delacc");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, -30, 590, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        // Retrieve the selected row index from FrmITpage's table
         int selectedRowIndex = itPageRef.getTblAccounts().getSelectedRow();
         if (selectedRowIndex == -1) {
             JOptionPane.showMessageDialog(this, "Please select an account to delete.", "Error", JOptionPane.ERROR_MESSAGE);
             return;
         }

         // Show confirmation dialog box
         int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this account?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
         if (option == JOptionPane.YES_OPTION) {
             // Remove the selected row from the table
             DefaultTableModel model = (DefaultTableModel) itPageRef.getTblAccounts().getModel();
             model.removeRow(selectedRowIndex);

             // Update CSV file with data from the updated table
             String csvFilePath = "src/main/java/files/Users.csv";
             CSVFileManager.updateCSVFile(csvFilePath, itPageRef.getTblAccounts());

             // Show success message
             JOptionPane.showMessageDialog(this, "Account deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

             // Close the FrmDeleteAccount form
             this.dispose();
         }
    }//GEN-LAST:event_btnDeleteActionPerformed
*/
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
    // Retrieve the selected row index from FrmITpage's table
    int selectedRowIndex = itPageRef.getTblAccounts().getSelectedRow();
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Please select an account to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Get the employee number from the selected row in the table
    String employeeNum = itPageRef.getTblAccounts().getValueAt(selectedRowIndex, 1).toString();

    // Show confirmation dialog box
    int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this account?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
    if (option == JOptionPane.YES_OPTION) {
        try (Connection conn = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD)) {
            // Prepare the SQL DELETE statement
            String sql = "DELETE FROM login WHERE Username = ?";
            try (PreparedStatement statement = conn.prepareStatement(sql)) {
                // Set the employee number as parameter for the prepared statement
                statement.setString(1, employeeNum);

                // Execute the delete statement
                int rowsAffected = statement.executeUpdate();
                if (rowsAffected > 0) {
                    // Remove the selected row from the table
                    DefaultTableModel model = (DefaultTableModel) itPageRef.getTblAccounts().getModel();
                    model.removeRow(selectedRowIndex);

                    // Clear the text fields
                    clearTextFields();

                    // Show success message
                    JOptionPane.showMessageDialog(this, "Account deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    
                    // Close the current frame
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete account.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

// Method for clearing text fields
private void clearTextFields() {
    txtEmployeeNum.setText("");
    txtUsername.setText("");
    txtPassword.setText("");
    jCBRoleAccess.setSelectedItem(null);
}



    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private boolean isExistingEmployeeFrameOpen = false; // Flag to track if the existing employee frame is open
    
    private void btnViewEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewEmpActionPerformed
        // Check if the existing employee frame is already open
        if (!isExistingEmployeeFrameOpen) {
            // Set the flag to indicate that the existing employee frame is now open
            isExistingEmployeeFrameOpen = true;

            FrmExistingEmployee existingEmployeeFrame = new FrmExistingEmployee();
            // Make the frame visible
            existingEmployeeFrame.setVisible(true);

            // Add a window listener to detect when the existing employee frame is closed
            existingEmployeeFrame.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                    // Reset the flag when the existing employee frame is closed
                    isExistingEmployeeFrameOpen = false;
                }
            });
        }
    }//GEN-LAST:event_btnViewEmpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmDeleteAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmDeleteAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmDeleteAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmDeleteAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new FrmDeleteAccount().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    public javax.swing.JButton btnDelete;
    private javax.swing.JButton btnViewEmp;
    public javax.swing.JComboBox<String> jCBRoleAccess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblEmployeeNum;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRoleAccess;
    private javax.swing.JLabel lblUsername;
    public javax.swing.JTextField txtEmployeeNum;
    public javax.swing.JTextField txtPassword;
    public javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
